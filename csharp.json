{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"System":{
		"prefix":"system",
		"body":[
			"public interface I${1:System}System { }",
			"public class ${1:System}System : I${1:System}System { }"
		],
		"description": "System template"
	},
	"Installer":{
		"prefix":"installer",
		"body":[
		"using UnityEngine;",
		"using Zenject;",
		"",
		"public class ${1:Insaller}Installer : MonoInstaller",
		"{",
		"	public override void InstallBindings()",
		"	{",
		"		Container.Bind<I${1:Insaller}System>().To<${1:Insaller}System>().FromComponentInHierarchy().AsSingle();",
		"	}",
		"}",
		],
		"description": "Installer template"

	},
	"MVCController": {
		"prefix": "controller",
		"body": [
			"// Container.Bind<I${1:Controller}Controller>().To<${1:Controller}Controller>().AsSingle();",
			"// Container.Bind<I${1:Controller}Model>().To<${1:Controller}Model>().AsSingle();",
			"using Zenject;",
			"",
			"public interface I${1:Controller}Controller",
			"{",
			"    void Initialize();",
			"    void SetVisible(bool v);",
			"    void Tick();",
			"    void Dispose();",
			"}",
			"",
			"public class ${1:Controller}Controller : I${1:Controller}Controller",
			"{",
			"    private I${1:Controller}Model model;",
			"",
			"    [Inject]",
			"    public void Construct(I${1:Model}Model model) => this.model = model;",
			"",
			"    public void Initialize()",
			"    {",
			"        throw new System.NotImplementedException();",
			"    }",
			"",
			"    public void SetVisible(bool v) => model.IsEnabled = v;",
			"",
			"    public void Tick()",
			"    {",
			"         throw new System.NotImplementedException();",
			"    }",
			"",
			"    public void Dispose()",
			"    {",
			"         throw new System.NotImplementedException();",
			"    }",
			"}"
		],
		"description": "Zenject Controller template"
	},
	
		"MVCView": {
			"prefix": "view",
			"body": [
				"using UnityEngine;",
				"using Zenject;",
				"",
				"public class ${1:View}View : MonoBehaviour",
				"{",
				"    Canvas canvas;",
				"    CanvasGroup canvasGroup;",
				"    I${1:Model}Model model;",
				"",
				"    [Inject]",
				"    public void Construct(I${1:Model}Model model)",
				"    {",
				"        this.model = model;",
				"    }",
				"",
				"    public void Awake()",
				"    {",
				"        var canvases = GetComponentsInParent<Canvas>();",
				"        if (canvases.Length == 0)",
				"        {",
				"            Debug.LogError($\"No canvas found on {gameObject.name}\");",
				"        }",
				"        canvas = canvases[canvases.Length - 1];",
				"        canvasGroup = GetComponentInChildren<CanvasGroup>();",
				"        if (canvasGroup == null)",
				"        {",
				"            Debug.LogError($\"No canvas group found on {gameObject.name}\");",
				"        }",
				"        OnIsEnabledChanged(false);",
				"        if (model != null)",
				"        {",
				"            model.OnIsEnabledChanged += OnIsEnabledChanged;",
				"            model.OnIsDirtyChanged += OnIsDirtyChanged;",
				"        }",
				"    }",
				"",
				"    public void OnDestroy()",
				"    {",
				"        if (model != null)",
				"        {",
				"            model.OnIsEnabledChanged -= OnIsEnabledChanged;",
				"            model.OnIsDirtyChanged -= OnIsDirtyChanged;",
				"        }",
				"    }",
				"",
				"    void OnIsEnabledChanged(bool newIsEnabled)",
				"    {",
				"        canvasGroup.gameObject.SetActive(newIsEnabled);",
				"        canvasGroup.alpha = newIsEnabled ? 1f : 0f;",
				"    }",
				"",
				"    void OnIsDirtyChanged(bool newIsDirty)",
				"    {",
				"        throw new System.NotImplementedException();",
				"    }",
				"}"
			],
			"description": "Zenject View template"
		},
		"MVCModel": {
			"prefix": "model",
			"body": [
				"using System;",
				"",
				"public interface I${1:Model}Model",
				"{",
				"    bool IsEnabled { get; set; }",
				"    bool IsDirty { get; set; }",
				"    Action<bool> OnIsEnabledChanged { get; set; }",
				"    Action<bool> OnIsDirtyChanged { get; set; }",
				"    void Save();",
				"    void Load();",
				"}",
				"",
				"public class ${1:Model}Model : I${1:Model}Model",
				"{",
				"    private bool isEnabled;",
				"    public bool IsEnabled",
				"    {",
				"        get => isEnabled; ",
				"        set",
				"        {",
				"            if (isEnabled != value)",
				"            {",
				"                isEnabled = value;",
				"                OnIsEnabledChanged?.Invoke(isEnabled);",
				"            }",
				"        }",
				"    }",
				"",
				"    private bool isDirty;",
				"    public bool IsDirty",
				"    {",
				"        get => isDirty; ",
				"        set",
				"        {",
				"            if (isDirty != value)",
				"            {",
				"                isDirty = value;",
				"                OnIsDirtyChanged?.Invoke(isDirty);",
				"            }",
				"        }",
				"    }",
				"",
				"    public Action<bool> OnIsEnabledChanged { get; set; }",
				"    public Action<bool> OnIsDirtyChanged { get; set; }",
				"",
				"    public void Save()",
				"    {",
				"        if (IsDirty)",
				"        {",
				"            IsDirty = false;",
				"        }",
				"    }",
				"",
				"    public void Load()",
				"    {",
				"        throw new NotImplementedException();",
				"    }",
				"}",
				"}"
			],
			"description": "Zenject Model template"
		},
		  "Property": {
			"prefix": "property",
			"body": [
				"${1:Type} ${2:Property};",
				"public ${1:Type} ${2/(^.)(.*)/${1:/upcase}${2:/capitalizeFirstLetter}/}",
				"{",
				"    get => ${2:Property};",
				"    private set",
				"    {",
				"        if (${2:Property} != value)",
				"        {",
				"            ${2:Property} = value;",
				"            ${3:Action}?.Invoke(${2:Property});",
				"        }",
				"    }",
				"}"
				"",
				"public Action<${1:Type}> ${3:Action} { get; }"
			],
			"description": "Setter property template"
		}
}
