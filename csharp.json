{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"mvcPool": {
		"prefix": "pool",
		"body": [
			"using UnityEngine;",
			"using UnityEngine.UI;",
			"using Zenject;",
			"using System;",
			"using System.Collections.Generic;",
			"",
			"public struct ${1}Context",
			"{",
			"    internal Vector3 position;",
			"    internal int index;",
			"    internal bool isActive;",
			"    internal bool isEnabled;",
			"}",
			"",
			"public class ${1}Model",
			"{",
			"    private ${1}Context context;",
			"    public ${1}Context Context",
			"    {",
			"        get => context;",
			"        set",
			"        {",
			"            context = value;",
			"            OnContextChanged?.Invoke(context);",
			"        }",
			"    }",
			"    public Action<${1}Context> OnContextChanged;",
			"",
			"    private bool isEnabled;",
			"    public bool IsEnabled",
			"    {",
			"        get => isEnabled;",
			"        set",
			"        {",
			"            if (isEnabled != value)",
			"            {",
			"                isEnabled = value;",
			"                OnIsEnabledChanged?.Invoke(isEnabled);",
			"            }",
			"        }",
			"    }",
			"",
			"    public Action<bool> OnIsEnabledChanged { get; set; }",
			"",
			"    internal void OnIsDirtyChanged(bool obj)",
			"    {",
			"        throw new NotImplementedException();",
			"    }",
			"}",
			"",
			"public class ${1}Controller : IInitializable, IDisposable",
			"{",
			"    private readonly ${1}Model model;",
			"    public ${1}View view { get; }",
			"",
			"    public ${1}Controller(${1}Model model, ${1}View view)",
			"    {",
			"        this.model = model;",
			"        this.view = view;",
			"    }",
			"",
			"    [Inject]",
			"    public void Initialize()",
			"    {",
			"        model.OnContextChanged += view.OnContextChanged;",
			"        model.OnIsEnabledChanged += view.OnIsEnabledChanged;",
			"        view.OnIsDirtyChanged += model.OnIsDirtyChanged;",
			"    }",
			"",
			"    public void Dispose()",
			"    {",
			"        model.OnContextChanged -= view.OnContextChanged;",
			"        model.OnIsEnabledChanged -= view.OnIsEnabledChanged;",
			"        view.OnIsDirtyChanged -= model.OnIsDirtyChanged;",
			"    }",
			"",
			"    public void SetContext(${1}Context context)",
			"    {",
			"        model.Context = context;",
			"    }",
			"",
			"    public void SetEnabled(bool value)",
			"    {",
			"        model.IsEnabled = value;",
			"    }",
			"",
			"    public void Tick()",
			"    {",
			"        throw new NotImplementedException();",
			"    }",
			"",
			"    public void Save()",
			"    {",
			"        throw new NotImplementedException();",
			"    }",
			"",
			"    public void Load()",
			"    {",
			"        throw new NotImplementedException();",
			"    }",
			"}",
			"",
			"public class ${1}ControllerPool : MemoryPool<${1}Context, Transform, ${1}Controller>",
			"{",
			"    protected override void Reinitialize(${1}Context context, Transform parent, ${1}Controller item)",
			"    {",
			"        item.SetContext(context);",
			"        item.view.transform.SetParent(parent, false);",
			"        item.SetEnabled(true);",
			"    }",
			"}",
			"",
			"public interface I${1}Handler",
			"{",
			"    void SetContext(${1}Context[] contexts, Transform parentTransform);",
			"}",
			"",
			"public class ${1}Handler : I${1}Handler",
			"{",
			"    [Inject]",
			"    private ${1}ControllerPool _controllerPool;",
			"",
			"    private List<${1}Controller> _controllers = new List<${1}Controller>();",
			"",
			"    public void SetContext(${1}Context[] contexts, Transform parentTransform)",
			"    {",
			"        for (int i = 0; i < _controllers.Count; i++)",
			"        {",
			"            _controllers[i].SetEnabled(false);",
			"        }",
			"",
			"        for (int i = 0; i < contexts.Length; i++)",
			"        {",
			"            if (i < _controllers.Count)",
			"            {",
			"                _controllers[i].SetContext(contexts[i]);",
			"            }",
			"            else",
			"            {",
			"                var controller = _controllerPool.Spawn(contexts[i], parentTransform);",
			"                _controllers.Add(controller);",
			"            }",
			"            _controllers[i].SetEnabled(true);",
			"        }",
			"",
			"        for (int i = _controllers.Count - 1; i >= contexts.Length; i--)",
			"        {",
			"            _controllerPool.Despawn(_controllers[i]);",
			"            _controllers.RemoveAt(i);",
			"        }",
			"    }",
			"",
			"    private void OnDestroy()",
			"    {",
			"        foreach (var controller in _controllers)",
			"        {",
			"            _controllerPool.Despawn(controller);",
			"        }",
			"        _controllers.Clear();",
			"    }",
			"}",
			"",
			"using UnityEngine;",
			"using Zenject;",
			"",
			"public class ${1}Installer : MonoInstaller {",
			"    public GameObject viewPrefab;",
			"",
			"    public override void InstallBindings() {",
			"        Container.BindMemoryPool<${1}Controller, ${1}ControllerPool>()",
			"            .WithInitialSize(10)",
			"            .FromSubContainerResolve()",
			"            .ByNewPrefabMethod(viewPrefab, InstallController)",
			"            .UnderTransformGroup(\"Controllers\");",
			"    }",
			"",
			"    private void InstallController(DiContainer subContainer) {",
			"        subContainer.Bind<${1}Model>().AsSingle();",
			"        subContainer.Bind<${1}View>().FromComponentOnRoot().AsSingle();",
			"        subContainer.Bind<${1}Controller>().AsSingle().NonLazy();",
			"    }",
			"}",
			"",
			"",
			"using UnityEngine;",
			"using System;",
			"using TMPro;",
			"using UnityEngine.UI;",
			"",
			"public class ${1}View : MonoBehaviour",
			"{",
			"    private CanvasGroup canvasGroup;",
			"    private RectTransform rectTransform;",
			"",
			"    public Action<bool> OnIsDirtyChanged;",
			"",
			"",
			"    private void Start()",
			"    {",
			"        canvasGroup = GetComponentInChildren<CanvasGroup>();",
			"        rectTransform = GetComponent<RectTransform>();",
			"",
			"        if (canvasGroup == null)",
			"        {",
			"            Debug.LogError($\"No CanvasGroup found on {gameObject.name}\");",
			"        }",
			"    }",
			"",
			"    public void OnIsEnabledChanged(bool isEnabled)",
			"    {",
			"        if (canvasGroup != null)",
			"        {",
			"            canvasGroup.alpha = isEnabled ? 1f : 0f;",
			"            canvasGroup.interactable = isEnabled;",
			"            canvasGroup.blocksRaycasts = isEnabled;",
			"            canvasGroup.gameObject.SetActive(isEnabled);",
			"        }",
			"    }",
			"",
			"    public void OnContextChanged(${1}Context context)",
			"    {",
			"",			
			"        if (rectTransform != null)",
			"        {",
			"            rectTransform.anchoredPosition = context.position;",
			"        }",
			"    }",
			"}"
		],
		"description": ""
	},
	"Bind Interface to Implementation": {
		"prefix": "bindInterface",
		"body": [
			"Container.Bind<I${1}Controller>().To<${1}Controller>().AsSingle();",
		],
		"description": "Binds I${1}Controller implementations as single instances."
	},
	"System": {
		"prefix": "system",
		"body": [
			"public interface I${1:System}System { }",
			"public class ${1:System}System : I${1:System}System { }"
		],
		"description": "System template"
	},
	"Installer": {
		"prefix": "installer",
		"body": [
			"using UnityEngine;",
			"using Zenject;",
			"",
			"public class ${1:Installer}Installer : MonoInstaller",
			"{",
			"    public override void InstallBindings()",
			"    {",
			"        Container.Bind<I${1:Installer}System>().To<${1:Installer}System>().FromComponentInHierarchy().AsSingle();",
			"    }",
			"}",
		],
		"description": "Installer template"
	},
	"MVCController": {
		"prefix": "controller",
		"body": [
			"using System;",
			"using Zenject;",
			"using UnityEngine;",
			"",
			"public interface I${1:Controller}Controller",
			"{",
			"    void Initialize(${1:Controller}View view);",
			"    void SetVisible(bool v);",
			"    void SetEnabled(bool v);",
			"    void Tick();",
			"    void Dispose();",
			"}",
			"",
			"public class ${1:Controller}Controller : I${1:Controller}Controller, IDisposable",
			"{",
			"    private ${1:Controller}Model model;",
			"    private ${1:Controller}View view;",
			"",
			"    public ${1:Controller}Controller()",
			"    {",
			"        this.model = new ${1:controller}Model();",
			"    }",
			"",
			"    public void Initialize(${1:Controller}View view)",
			"    {",
			"        this.view = view;",
			"        if (model != null)",
			"        {",
			"            model.OnIsVisibleChanged += view.OnIsVisibleChanged;",
			"            model.OnIsEnabledChanged += view.OnIsEnabledChanged;",
			"            model.OnIsDirtyChanged += view.OnIsDirtyChanged;",
			"            model.Initialize();",
			"        }",
			"    }",
			"",
			"    public void SetVisible(bool v) => model.IsVisible = v;",
			"",
			"    public void SetEnabled(bool v) => model.IsEnabled = v;",
			"",
			"    public void Tick()",
			"    {",
			"        // Add tick logic if necessary",
			"    }",
			"",
			"    public void Dispose()",
			"    {",
			"        if (model != null)",
			"        {",
			"            model.OnIsVisibleChanged -= view.OnIsVisibleChanged;",
			"            model.OnIsEnabledChanged -= view.OnIsEnabledChanged;",
			"            model.OnIsDirtyChanged -= view.OnIsDirtyChanged;",
			"        }",
			"        if (view != null)",
			"        {",
			"            UnityEngine.Object.Destroy(view.gameObject);",
			"        }",
			"    }",
			"}"
		],
		"description": "Zenject MVC Controller template with Initialize, SetVisible, SetEnabled, Tick, and Dispose methods"
	},
	"MVCView": {
		"prefix": "view",
		"body": [
			"using System;",
			"using UnityEngine;",
			"using UnityEngine.UI;",
			"using Zenject;",
			"",
			"public class ${1:View}View : MonoBehaviour",
			"{",
			"    private Canvas canvas;",
			"    private CanvasGroup canvasGroup;",
			"",
			"    private I${1:Controller}Controller controller;",
			"",
			"    [Inject]",
			"    public void Construct(I${1:Controller}Controller controller)",
			"    {",
			"        Construct();",
			"        this.controller = controller;",
			"        controller.Initialize(this);",
			"    }",
			"",
			"    private void Construct()",
			"    {",
			"        var canvases = GetComponentsInParent<Canvas>();",
			"        if (canvases.Length == 0)",
			"        {",
			"            Debug.LogError($\"No canvas found on {gameObject.name}\");",
			"        }",
			"",
			"        canvas = canvases[canvases.Length - 1];",
			"        canvasGroup = GetComponentInChildren<CanvasGroup>();",
			"        if (canvasGroup == null)",
			"        {",
			"            Debug.LogError($\"No canvas group found on {gameObject.name}\");",
			"        }",
			"    }",
			"",
			"    public void OnIsVisibleChanged(bool v)",
			"    {",
			"        canvasGroup.alpha = v ? 1f : 0f;",
			"        canvasGroup.interactable = v;",
			"        canvasGroup.blocksRaycasts = v;",
			"    }",
			"",
			"    public void OnIsEnabledChanged(bool v)",
			"    {",
			"        canvasGroup.gameObject.SetActive(v);",
			"        canvasGroup.alpha = v ? 1f : 0f;",
			"        canvasGroup.interactable = v;",
			"        canvasGroup.blocksRaycasts = v;",
			"    }",
			"",
			"    public void OnIsDirtyChanged(bool newIsDirty)",
			"    {",
			"        // Handle dirty state changes here.",
			"    }",
			"}"
		],
		"description": "Zenject MVC View template with Construct, visibility, and enabled state handling"
	},
	"MVCModel": {
		"prefix": "model",
		"body": [
			"using System;",
			"",
			"public class ${1:Model}Model",
			"{",
			"    public void Initialize()",
			"    {",
			"        OnIsVisibleChanged?.Invoke(IsVisible);",
			"        OnIsDirtyChanged?.Invoke(IsDirty);",
			"        OnIsEnabledChanged?.Invoke(IsVisible);",
			"    }",
			"",
			"    private bool isVisible;",
			"    public bool IsVisible",
			"    {",
			"        get => isVisible;",
			"        set",
			"        {",
			"            if (isVisible != value)",
			"            {",
			"                isVisible = value;",
			"                OnIsVisibleChanged?.Invoke(isVisible);",
			"            }",
			"        }",
			"    }",
			"",
			"    private bool isEnabled;",
			"    public bool IsEnabled",
			"    {",
			"        get => isEnabled;",
			"        set",
			"        {",
			"            if (isEnabled != value)",
			"            {",
			"                isEnabled = value;",
			"                OnIsEnabledChanged?.Invoke(isEnabled);",
			"            }",
			"        }",
			"    }",
			"",
			"    private bool isDirty;",
			"    public bool IsDirty",
			"    {",
			"        get => isDirty;",
			"        set",
			"        {",
			"            if (isDirty != value)",
			"            {",
			"                isDirty = value;",
			"                OnIsDirtyChanged?.Invoke(isDirty);",
			"            }",
			"        }",
			"    }",
			"",
			"    public Action<bool> OnIsVisibleChanged { get; set; }",
			"    public Action<bool> OnIsEnabledChanged { get; set; }",
			"    public Action<bool> OnIsDirtyChanged { get; set; }",
			"",
			"    public void Save()",
			"    {",
			"        if (IsDirty)",
			"        {",
			"            IsDirty = false;",
			"        }",
			"    }",
			"",
			"    public void Load()",
			"    {",
			"        throw new NotImplementedException();",
			"    }",
			"}"
		],
		"description": "Zenject MVC Model template with Initialize, Save, Load, and properties for visibility, enabled state, and dirty state"
	},
	"MVC": {
		"prefix": "mvc",
		"body": [
			"using System;",
			"using Zenject;",
			"using UnityEngine;",
			"using UnityEngine.UI;",
			"",
			"public interface I${1:Controller}Controller",
			"{",
			"    void Initialize(${1:Controller}View view);",
			"    void SetVisible(bool v);",
			"    void SetEnabled(bool v);",
			"    void Tick();",
			"    void Dispose();",
			"}",
			"",
			"public class ${1:Controller}Controller : I${1:Controller}Controller, IDisposable",
			"{",
			"    private ${1:Controller}Model model;",
			"    private ${1:Controller}View view;",
			"",
			"    public ${1:Controller}Controller()",
			"    {",
			"        this.model = new ${1:controller}Model();",
			"    }",
			"",
			"    public void Initialize(${1:Controller}View view)",
			"    {",
			"        this.view = view;",
			"        if (model != null)",
			"        {",
			"            model.OnIsVisibleChanged += view.OnIsVisibleChanged;",
			"            model.OnIsEnabledChanged += view.OnIsEnabledChanged;",
			"            model.OnIsDirtyChanged += view.OnIsDirtyChanged;",
			"            model.Initialize();",
			"        }",
			"    }",
			"",
			"    public void SetVisible(bool v) => model.IsVisible = v;",
			"",
			"    public void SetEnabled(bool v) => model.IsEnabled = v;",
			"",
			"    public void Tick()",
			"    {",
			"        // Add tick logic if necessary",
			"    }",
			"",
			"    public void Dispose()",
			"    {",
			"        if (model != null)",
			"        {",
			"            model.OnIsVisibleChanged -= view.OnIsVisibleChanged;",
			"            model.OnIsEnabledChanged -= view.OnIsEnabledChanged;",
			"            model.OnIsDirtyChanged -= view.OnIsDirtyChanged;",
			"        }",
			"        if (view != null)",
			"        {",
			"            UnityEngine.Object.Destroy(view.gameObject);",
			"        }",
			"    }",
			"}",
			"",
			"public class ${1:Model}Model",
			"{",
			"    public void Initialize()",
			"    {",
			"        OnIsVisibleChanged?.Invoke(IsVisible);",
			"        OnIsDirtyChanged?.Invoke(IsDirty);",
			"        OnIsEnabledChanged?.Invoke(IsVisible);",
			"    }",
			"",
			"    private bool isVisible;",
			"    public bool IsVisible",
			"    {",
			"        get => isVisible;",
			"        set",
			"        {",
			"            if (isVisible != value)",
			"            {",
			"                isVisible = value;",
			"                OnIsVisibleChanged?.Invoke(isVisible);",
			"            }",
			"        }",
			"    }",
			"",
			"    private bool isEnabled;",
			"    public bool IsEnabled",
			"    {",
			"        get => isEnabled;",
			"        set",
			"        {",
			"            if (isEnabled != value)",
			"            {",
			"                isEnabled = value;",
			"                OnIsEnabledChanged?.Invoke(isEnabled);",
			"            }",
			"        }",
			"    }",
			"",
			"    private bool isDirty;",
			"    public bool IsDirty",
			"    {",
			"        get => isDirty;",
			"        set",
			"        {",
			"            if (isDirty != value)",
			"            {",
			"                isDirty = value;",
			"                OnIsDirtyChanged?.Invoke(isDirty);",
			"            }",
			"        }",
			"    }",
			"",
			"    public Action<bool> OnIsVisibleChanged { get; set; }",
			"    public Action<bool> OnIsEnabledChanged { get; set; }",
			"    public Action<bool> OnIsDirtyChanged { get; set; }",
			"",
			"    public void Save()",
			"    {",
			"        if (IsDirty)",
			"        {",
			"            IsDirty = false;",
			"        }",
			"    }",
			"",
			"    public void Load()",
			"    {",
			"        throw new NotImplementedException();",
			"    }",
			"}",
			"",
			"public class ${1:View}View : MonoBehaviour",
			"{",
			"    private Canvas canvas;",
			"    private CanvasGroup canvasGroup;",
			"",
			"    private I${1:Controller}Controller controller;",
			"",
			"    [Inject]",
			"    public void Construct(I${1:Controller}Controller controller)",
			"    {",
			"        Construct();",
			"        this.controller = controller;",
			"        controller.Initialize(this);",
			"    }",
			"",
			"    private void Construct()",
			"    {",
			"        var canvases = GetComponentsInParent<Canvas>();",
			"        if (canvases.Length == 0)",
			"        {",
			"            Debug.LogError($\"No canvas found on {gameObject.name}\");",
			"        }",
			"",
			"        canvas = canvases[canvases.Length - 1];",
			"        canvasGroup = GetComponentInChildren<CanvasGroup>();",
			"        if (canvasGroup == null)",
			"        {",
			"            Debug.LogError($\"No canvas group found on {gameObject.name}\");",
			"        }",
			"    }",
			"",
			"    public void OnIsVisibleChanged(bool v)",
			"    {",
			"        canvasGroup.alpha = v ? 1f : 0f;",
			"        canvasGroup.interactable = v;",
			"        canvasGroup.blocksRaycasts = v;",
			"    }",
			"",
			"    public void OnIsEnabledChanged(bool v)",
			"    {",
			"        canvasGroup.gameObject.SetActive(v);",
			"        canvasGroup.alpha = v ? 1f : 0f;",
			"        canvasGroup.interactable = v;",
			"        canvasGroup.blocksRaycasts = v;",
			"    }",
			"",
			"    public void OnIsDirtyChanged(bool newIsDirty)",
			"    {",
			"        // Handle dirty state changes here.",
			"    }",
			"}"
		],
		"description": "Combined Zenject MVC template with Controller, View, and Model for visibility, enabled state, and dirty state management"
	},	
	"PropertyWithBackingFieldAndAction": {
		"prefix": "propertyWithBackingFieldAndAction",
		"body": [
			"${1:Type} ${2:fieldName};",
			"public ${1:Type} ${3:PropertyName}",
			"{",
			"    get => ${2:fieldName};",
			"    set",
			"    {",
			"        if (${2:fieldName} != value)",
			"        {",
			"            ${2:fieldName} = value;",
			"            On${3:PropertyName}Changed?.Invoke(${2:fieldName});",
			"        }",
			"    }",
			"}",
			"",
			"public Action<${1:Type}> On${3:PropertyName}Changed { get; set; }"
		],
		"description": "Property with backing field, event invocation, and Action event"
	},
	"modelComponent": {
		"prefix": "modelComponent",
		"body": [
			"using System;",
			"",
			"public class ${prop}Model",
			"{",
			"    public void Initialize()",
			"    {",
			"        OnIsDirtyChanged?.Invoke(IsDirty);",
			"        OnIsEnabledChanged?.Invoke(IsEnabled);",
			"    }",
			"",
			"    private bool isEnabled;",
			"    public bool IsEnabled",
			"    {",
			"        get => isEnabled;",
			"        set",
			"        {",
			"            if (isEnabled != value)",
			"            {",
			"                isEnabled = value;",
			"                OnIsEnabledChanged?.Invoke(isEnabled);",
			"            }",
			"        }",
			"    }",
			"    public Action<bool> OnIsEnabledChanged { get; set; }",
			"",
			"    private bool isDirty;",
			"    public bool IsDirty",
			"    {",
			"        get => isDirty;",
			"        set",
			"        {",
			"            if (isDirty != value)",
			"            {",
			"                isDirty = value;",
			"                OnIsDirtyChanged?.Invoke(isDirty);",
			"            }",
			"        }",
			"    }",
			"    public Action<bool> OnIsDirtyChanged { get; set; }",
			"",
			"    ${prop}Data ${prop2}Data;",
			"    public ${prop}Data ${prop}Data",
			"    {",
			"        get => ${prop2}Data;",
			"        set",
			"        {",
			"            if (${prop2}Data != value)",
			"            {",
			"                ${prop2}Data = value;",
			"                On${prop}DataChanged?.Invoke(${prop2}Data);",
			"            }",
			"        }",
			"    }",
			"    public Action<${prop}Data> On${prop}DataChanged { get; set; }",
			"",
			"    public void Save()",
			"    {",
			"        if (IsDirty)",
			"        {",
			"            IsDirty = false;",
			"        }",
			"    }",
			"",
			"    public void Load()",
			"    {",
			"        throw new NotImplementedException();",
			"    }",
			"}"
		],
		"description": "Snippet template for ${prop}Model component"
	},
	"controllerComponent": {
		"prefix": "controllerComponent",
		"body": [
			"using System;",
			"using UnityEngine;",
			"using Zenject;",
			"",
			"public interface I${prop}Controller",
			"{",
			"    void SetEnabled(bool v);",
			"    void Tick();",
			"    void Dispose();",
			"    void SetData(${prop}Data data);",
			"    void Save();",
			"    void Load();",
			"}",
			"",
			"public class ${prop}Controller : I${prop}Controller, IDisposable",
			"{",
			"    private readonly ${prop}Model model;",
			"    private readonly ${prop}View view;",
			"",
			"    [Inject]",
			"    private readonly IPrefabSystem prefabSystem;",
			"",
			"    public ${prop}Controller(Transform parentTransform)",
			"    {",
			"        model = new ${prop}Model();",
			"        var ${prop}ViewPrefab = prefabSystem.Get${prop}Prefab(parentTransform);",
			"        view = ${prop}ViewPrefab.GetComponent<${prop}View>();",
			"",
			"        if (model != null)",
			"        {",
			"            model.OnIsEnabledChanged += view.OnIsEnabledChanged;",
			"            model.OnIsDirtyChanged += view.OnIsDirtyChanged;",
			"            model.On${prop}DataChanged += view.On${prop}DataChanged ;",
			"            model.Initialize();",
			"        }",
			"    }",
			"",
			"    public void SetEnabled(bool v)",
			"    {",
			"        model.IsEnabled = v;",
			"    }",
			"",
			"    public void SetData(${prop}Data data)",
			"    {",
			"        model.${prop}Data = data;",
			"    }",
			"",
			"    public void Save()",
			"    {",
			"        model.Save();",
			"    }",
			"",
			"    public void Load()",
			"    {",
			"        model.Load();",
			"    }",
			"",
			"    public void Tick()",
			"    {",
			"        throw new NotImplementedException();",
			"    }",
			"",
			"    public void Dispose()",
			"    {",
			"        if (model != null)",
			"        {",
			"            model.OnIsEnabledChanged -= view.OnIsEnabledChanged;",
			"            model.OnIsDirtyChanged -= view.OnIsDirtyChanged;",
			"            model.On${prop}DataChanged -= view.On${prop}DataChanged ;",
			"        }",
			"",
			"        if (view != null)",
			"        {",
			"            UnityEngine.Object.Destroy(view.gameObject);",
			"        }",
			"    }",
			"}"
		],
		"description": "Snippet for ${prop}Controller component"
	},
	"viewComponent": {
		"prefix": "viewComponent",
		"body": [
			"using UnityEngine;",
			"",
			"public class ${prop}View : MonoBehaviour",
			"{",
			"    private CanvasGroup canvasGroup;",
			"",
			"    public int OnDataChanged { get; internal set; }",
			"",
			"    public void Construct()",
			"    {",
			"        canvasGroup = GetComponentInChildren<CanvasGroup>();",
			"        if (canvasGroup == null)",
			"        {",
			"            Debug.LogError($\"No CanvasGroup found on {gameObject.name}\");",
			"        }",
			"    }",
			"",
			"    public void OnIsEnabledChanged(bool isEnabled)",
			"    {",
			"        if (canvasGroup != null)",
			"        {",
			"            canvasGroup.alpha = isEnabled ? 1f : 0f;",
			"            canvasGroup.interactable = isEnabled;",
			"            canvasGroup.blocksRaycasts = isEnabled;",
			"            canvasGroup.gameObject.SetActive(isEnabled);",
			"        }",
			"    }",
			"",
			"    public void OnIsDirtyChanged(bool newIsDirty)",
			"    {",
			"        // Implement logic if needed",
			"    }",
			"",
			"    public void On${prop}DataChanged(${prop}Data data)",
			"    {",
			"        // Implement logic if needed",
			"    }",
			"}"
		],
		"description": "Snippet template for ${prop}View component"
	}
}
